pipeline {
    agent any

    parameters {
        string(name: 'customers-service', defaultValue: 'main')
        string(name: 'visits-service', defaultValue: 'main')
        string(name: 'vets-service', defaultValue: 'main')
        string(name: 'genai-service', defaultValue: 'main')
    }

    environment {
        DOCKER_IMAGE_BASE = "ptn3001/spring-petclinic"
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        PATH = "/var/lib/jenkins/bin:$PATH"
    }

    stages {
        stage('Initialize Kubernetes Context') {
            steps {
                script {
                    echo "Ensuring Minikube is running and context is valid..."
                    sh """
                        export KUBECONFIG=${KUBECONFIG}
                        minikube status
                        kubectl config delete-cluster minikube || true
                        kubectl config delete-context minikube || true
                        minikube update-context
                        kubectl config use-context minikube
                        kubectl config view --minify
                    """
                }
            }
        }

        stage('Deploy Helm Chart') {
            steps {
                script {
                    echo "Deploying Helm Chart for Spring PetClinic..."
                    sh """
                        helm upgrade --install spring-petclinic ./spring-petclinic \\
                            --namespace spring-petclinic \\
                            --create-namespace
                    """
                }
            }
        }

        stage('Deploy Microservices') {
            steps {
                script {
                    echo "Updating Kubernetes deployments with selected image tags..."

                    def services = [
                        [name: "customers-service",    tag: params['customers-service']],
                        [name: "vets-service",         tag: params['vets-service']],
                        [name: "visits-service",       tag: params['visits-service']],
                        [name: "genai-service",        tag: params['genai-service']]
                    ]

                    services.each { svc ->
                        def deployment = "spring-petclinic-${svc.name}"
                        def container = svc.name
                        def image = "${DOCKER_IMAGE_BASE}-${container}:${svc.tag}"
                        sh "kubectl set image deployment/${deployment} ${container}=${image} --record"
                        sh "kubectl rollout status deployment/${deployment}"
                    }
                }
            }
        }

        stage('Expose Service Endpoints') {
            steps {
                script {
                    def ports = [
                        admin:  sh(script: "kubectl get svc spring-petclinic-admin-server -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim(),
                        api:    sh(script: "kubectl get svc spring-petclinic-api-gateway -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim(),
                        config: sh(script: "kubectl get svc spring-petclinic-config-server -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    ]

                    echo "Admin Server   ➜ http://<Worker_Node_IP>:${ports.admin}"
                    echo "API Gateway    ➜ http://<Worker_Node_IP>:${ports.api}"
                    echo "Config Server  ➜ http://<Worker_Node_IP>:${ports.config}"
                }
            }
        }
    }

    post {
        success {
            echo "✅ CD deployment completed successfully."
        }
        failure {
            echo "❌ CD deployment failed. Check the logs for more details."
        }
    }
}
