pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDS = credentials('DOCKERHUB_TOKEN')
        GIT_CRED = credentials('GITHUB_TOKEN')
        DOCKER_IMAGE = "ptn3001/"
    }

    stages {
        stage('Check Changes') {
            steps {
                script {
                    echo "Commit SHA: ${GIT_COMMIT}"
                    def changedFiles = []
                    env.NO_SERVICES_TO_BUILD = 'false'
                    if (env.CHANGE_TARGET) {
                        changedFiles = sh(script: "git diff --name-only HEAD^", returnStdout: true).trim().split('\n').toList()
                    } else {
                        changedFiles = sh(script: "git diff --name-only HEAD^", returnStdout: true).trim().split('\n').toList()
                    }

                    def services = [
                        'spring-petclinic-customers-service',
                        'spring-petclinic-visits-service',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-genai-service'
                    ]
                    echo "Changed files: ${changedFiles}"

                    if (changedFiles.isEmpty() || changedFiles[0] == '') {
                        echo "No changes detected. Skipping pipeline."
                        currentBuild.result = 'ABORTED'
                        return
                    }

                    def detectedServices = []
                    for (service in services) {
                        if (changedFiles.any { it.startsWith(service + '/') }) {
                            detectedServices << service
                        }
                    }

                    if (detectedServices.isEmpty()) {
                        echo "No relevant service changes detected. Skipping pipeline."
                        env.NO_SERVICES_TO_BUILD = 'true'
                    } else {
                        echo "Detected Services: ${detectedServices}"
                        env.SERVICE_CHANGED = detectedServices.join(",")
                    }
                }
            }
        }

        stage('Build and Push Changed Services') {
            when {
                expression { env.NO_SERVICES_TO_BUILD == 'false' }
            }
            steps {
                script {
                    def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    def services = env.SERVICE_CHANGED.split(',')

                    sh "echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin"

                    for (svc in services) {
                        echo "Building and pushing image for ${svc}"
                        sh "./mvnw clean install -pl ${svc} -am -P buildDocker"

                        def image = "${DOCKER_IMAGE}${svc}"
                        sh """
                            docker tag ${image} ${image}:${commitId}
                            docker push ${image}:${commitId}

                            docker tag ${image} ${image}:latest
                            docker push ${image}:latest
                        """
                    }

                    env.IMAGE_TAG = commitId
                }
            }
        }

        // stage('Deploy to dev namespace') {
        //     when {
        //         expression { env.NO_SERVICES_TO_BUILD == 'false' }
        //     }
        //     steps {
        //         script {
        //             def services = env.SERVICE_CHANGED.split(',')
        //             def imageTag = env.IMAGE_TAG

        //             for (svc in services) {
        //                 def deployName = svc.replace('spring-petclinic-', '') // e.g., "customers-service"
        //                 def imageFull = "${DOCKER_IMAGE}${svc}:${imageTag}"

        //                 echo "Updating image for deployment ${deployName} in dev namespace"
        //                 sh "kubectl -n dev set image deployment/${deployName} ${deployName}=${imageFull} --record"
        //             }
        //         }
        //     }
        // }
        stage('Update GitOps Repo') {
            steps {
                script {
                    sh '''
                        rm -rf tmp-gitops-repo
                        git clone https://${GIT_CRED_USR}:${GIT_CRED_PSW}@github.com/pTn-3001/spring-petclinic-argocd.git tmp-gitops-repo
                        cd tmp-gitops-repo
                        git checkout dev
        
                        SERVICES_CHANGED="${SERVICE_CHANGED}"
                        IMAGE_TAG="${IMAGE_TAG}"
        
                        awk -v changed_services="$SERVICES_CHANGED" -v new_tag="$IMAGE_TAG" '
                        BEGIN {
                            split(changed_services, arr, ",")
                            for (i in arr) changed[arr[i]] = 1
                        }
                        /^  ([a-zA-Z0-9_-]+):$/ {
                            current_service = gensub(/^  ([a-zA-Z0-9_-]+):$/, "\\1", 1)
                        }
                        /tag:/ {
                            if (current_service in changed) {
                                sub(/tag: ".*"/, "tag: \"" new_tag "\"")
                            } else {
                                sub(/tag: ".*"/, "tag: \"latest\"")
                            }
                        }
                        { print }
                        ' spring-petclinic/values.yaml > temp.yaml && mv temp.yaml spring-petclinic/values.yaml
        
                        git config user.email "nghialk11@gmail.com"
                        git config user.name "nghiaz160904"
        
                        git add spring-petclinic/values.yaml
                        git commit -m "Update image tag to ${IMAGE_TAG} [ci skip]" || echo "No changes to commit"
                        git push origin dev
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment to dev namespace complete."
        }
        failure {
            echo "❌ Deployment failed. Please check logs."
        }
        aborted {
            echo "⚠️ Pipeline skipped due to no service changes."
        }
    }
}
